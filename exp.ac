#Author: Damien Sudol
#Program: exp
#Program takes input form user >= 0, raises 2^(input) and prints the answer. 
#if a negative value is entered program prints -1.
#if a number results in an overflow, -1 is printed.

in r1					#set input to r1
lli r2 14				#set r2 to 14 (upper bound for no overflow)
sub r3 r1 r2			#set r3 to check if input was beyond upper bound
bgz r3 &zeroOverflow 		#print -1 if bgz is true
lli r2 1				#set r2 to 1 for value comparison
sub r2 r2 r1			#set r2 = r2-r1
bez r2 &powerOne			#if r2 is zero after subtraction input was 1, jump to output =2
sub r2 r1 r0			#set r2 = r1 - r0 (0)
bez r2 &powerZero			#if r2 resuts in zero input was zero, jump to output = 1
bgz r1 &powerCompute		#check if r1 is postive, jump 9 if yes
zeroOverflow:lli r2 -1		#set r2 to -1 (for output)
out r2				#print -1 (indicates input was zero or resulted in overflow)
.halt					#end program
powerOne:lli r2 2			#set r2 to 2 (input was 1)
out r2				#print r2
.halt					#end program
powerZero:lli r2 1		#set r2 to 1 (input was 0)
out r2				#print r2
.halt					#end program
powerCompute:lli r4 1		#set r4 to 1 (track executions)
lli r3 2 				#set r3 to 2 
While:add r3 r3 r3		#begin loop adding r3 to istelf (doubling)
addi r4 r4 1			#increment r4 by 1
sub r5 r1 r4			#subtract r1 by r4 for bgz comparison
bgz r5 &While			#if r5 is positive jump to top of loop, else exit loop
out r3				#print r3 (product of 2^(input)
.halt					#end program
